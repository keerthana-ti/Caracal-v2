import time
import allure
from behave import *
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from features.pages.ItemcreationPage import ItemPage

@given(u'user is on the login page')
def loginpage(context):
    login_page = ItemPage(context.driver)
    login_page.login_page_nav()

@when(u'user enters the credentials')
def enter_cred(context):
    login_page = ItemPage(context.driver)
    login_page.enter_credentials("admin", "Password@123")
    allure.attach(context.driver.get_screenshot_as_png(), name="Login details",
                  attachment_type=allure.attachment_type.PNG)

@when(u'click on the login')
def click_login(context):
    login_page = ItemPage(context.driver)
    login_page.login_button()
    time.sleep(5)

@then(u'user is logged to dashboard page')
def redirect_dashboard(context):
    dashboard_page = ItemPage(context.driver)
    dashboard_page.redirect_to_dashboard()
    allure.attach(context.driver.get_screenshot_as_png(), name="Redirect to dashboard",
                  attachment_type=allure.attachment_type.PNG)
    time.sleep(5)

@when(u'user clicks on the inventory module menu in side nav bar')
def click_inventory(context):
    dashboard_page = ItemPage(context.driver)
    dashboard_page.click_inventorymenu()
    time.sleep(5)

@then(u'user will be directed to inventory module page')
def redirect_inventory(context):
    inventory_page = ItemPage(context.driver)
    inventory_page.inventory_redirect()
    allure.attach(context.driver.get_screenshot_as_png(), name="Redirect to inventory",
                  attachment_type=allure.attachment_type.PNG)

@given(u'user is on the inventory module page')
def inventory_page(context):
    login_page(context)
    enter_cred(context)
    click_login(context)
    redirect_dashboard(context)
    click_inventory(context)
    redirect_inventory(context)

@when(u'user clicks on the new item button')
def click_newitem(context):
    inventory_page = ItemPage(context.driver)
    inventory_page.click_createitem()

@then(u'user is redirected to item adding page')
def redirect_newitem(context):
    inventory_page = ItemPage(context.driver)
    inventory_page.createitem_page()
    allure.attach(context.driver.get_screenshot_as_png(), name="Redirect to new item",
                  attachment_type=allure.attachment_type.PNG)

@given(u'user is on the new item page')
def item_create(context):
    inventory_page(context)
    click_newitem(context)
    redirect_newitem(context)

@when(u'user enters itemname, select item type')
def itemname_itemtype(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.enter_itemname("Pen")
    newitem_page.select_itemtype()

@when(u'SKU, item id will be autogenerated')
def SKU_itemid(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.fetch_SKU()
    newitem_page.fetch_itemid()
    allure.attach(context.driver.get_screenshot_as_png(), name="SKU, Item id fetch",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user selects supplier, unit')
def supplier_unit(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.select_supplier()
    newitem_page.select_unit()

@when(u'enter costprice in that field')
def costprice(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.enter_costprice("23.90")

@when(u'user clicks on the add icon in the page')
def click_addicon(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.addunit_button()

@then(u'user will get the pop-up to enter unit details')
def enter_unit(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.unit_popup()

@then(u'the user enters the details')
def enter_userdetail(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.enter_unitname()
    newitem_page.enter_unitdesc()

@then(u'click on add to get the unit in the dropdown')
def add_unit(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.click_unitsave()
    newitem_page.select_unit()

@when(u'user enters the length, width, height')
def enter_lwh(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.enter_length("10")
    newitem_page.enter_width("10")
    newitem_page.enter_height("10")

@when(u'enters the weight in that field')
def enter_weight(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.enter_weight("10")

@then(u'selects the unit for both fields')
def select_unit(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.select_dimensionunit()
    newitem_page.select_weightunit()

@when(u'user enters the reorder level, stock limit')
def reorderlevel_stocklimit(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.enter_reorderlevel("20")
    newitem_page.enter_stocklimit("20")

@then(u'user enters the selling price')
def enter_sellingprice(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.enter_sellingprice("23.32")

@when(u'user enter the description')
def enter_desc(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.enter_itemdescription("Testing")

@when(u'click the returnable item checkbox')
def click_retunableitem(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.click_returnableitemcheckbox()

@when(u'user clicks on the attachment icon')
def click_attachment(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.click_attachment()

@when(u'attaches the image')
def attachimage(context):
    file_path = r"C:\Users\Keerthana\Pictures\Saved Pictures\415358-PEAOOX-749.jpg"
    time.sleep(5)
    pyautogui.write(file_path)
    time.sleep(10)
    pyautogui.press('enter')
    time.sleep(10)

@then(u'user is abe to get the list of imaged attched below the field')
def attachedimage(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="Image pop-up",
                  attachment_type=allure.attachment_type.PNG)

@then(u'user clicks on the image it will give a pop-up of that clicked image')
def click_image(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.click_attachedimage()

@when(u'user enters all the details')
def enter_alldetails(context):
    itemname_itemtype(context)
    SKU_itemid(context)
    supplier_unit(context)
    costprice(context)
    click_addicon(context)
    enter_unit(context)
    enter_userdetail(context)
    add_unit(context)
    enter_lwh(context)
    enter_weight(context)
    select_unit(context)
    reorderlevel_stocklimit(context)
    enter_sellingprice(context)
    enter_desc(context)
    click_retunableitem(context)
    click_attachment(context)
    attachimage(context)
    attachedimage(context)
    click_image(context)
    allure.attach(context.driver.get_screenshot_as_png(), name="Details entered",
                  attachment_type=allure.attachment_type.PNG)

@when(u'clicks on save button')
def click_save(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.click_savebutton()

@then(u'the item added will be displayed in the list')
def item_added(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="Details displayed",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user clicks on save button without entering item name, item type, unit')
def click_save_without_itemname(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.click_savebutton()

@then(u'user will get the mandatory error message for item name, item type, unit fields')
def mandatory_itemname(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.mandatory_itemname()
    newitem_page.mandatory_itemtype()
    newitem_page.mandatory_unit()
    allure.attach(context.driver.get_screenshot_as_png(), name="itemname, itemtype, unit mandate msg",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user clicks on save button without entering cost price, weight, reorder level')
def click_save_without_other(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.click_savebutton()

@then(u'user will get the mandatory error message for cost price, weight, reorder level fields')
def mandate_other(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.mandatory_costprice()
    newitem_page.mandatory_weight()
    newitem_page.mandatory_reorderlevel()
    newitem_page.mandatory_sellingprice()
    allure.attach(context.driver.get_screenshot_as_png(), name="Mandate to others",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user enters other than alphanumeric in the item name')
def enter_exceptalphanumeric(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.enter_itemname("@12#")

@then(u'user will get the validation error message for item name')
def validation_itemname(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.validation_itemname()
    allure.attach(context.driver.get_screenshot_as_png(), name="validation msg for item name",
                  attachment_type=allure.attachment_type.PNG)

@then(u'SKU, Item id needs to be in alphanumeric')
def validation_sku(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.fetch_SKU()
    newitem_page.fetch_itemid()

@when(u'user enters other than numbers in the cost price, selling price, dimensions, weight, reorder level, stock limit')
def enter_number(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.enter_costprice("test")
    newitem_page.enter_sellingprice("test")
    newitem_page.enter_length("test")
    newitem_page.enter_width("test")
    newitem_page.enter_height("test")
    newitem_page.enter_weight("test")
    newitem_page.enter_reorderlevel("test")
    newitem_page.enter_stocklimit("test")

@then(u'user will get the validation error message for cost price, selling price, dimensions, weight, reorder level, stock limit fields')
def validation_number(context):
    newitem_page = ItemPage(context.driver)
    newitem_page.validation_costprice()
    newitem_page.validation_sellingprice()
    newitem_page.validation_dimensions()
    newitem_page.validation_weight()
    newitem_page.validation_reorderlevel()
    newitem_page.validation_stocklimit()
    allure.attach(context.driver.get_screenshot_as_png(), name="validation msg for others",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user enters the search keywords')
def search_keywords(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.enter_search("Test")

@then(u'user wants to get the result regarding to the search')
def search_result(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="search results",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user enters the search keywords which is not there in the table')
def enter_search_keyword(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.enter_search("test")

@then(u'user wants to get the no data found message inside the table')
def nodata_errmsg(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.get_searcherrormsg()
    allure.attach(context.driver.get_screenshot_as_png(), name="no records",
                  attachment_type=allure.attachment_type.PNG)

@when(u'the user clicks all in the stock level')
def clicks_stocklevel(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.get_all()

@then(u'all items will be displayed')
def item_display(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="all_items",
                  attachment_type=allure.attachment_type.PNG)

@when(u'the user clicks low in the stock level')
def low_level(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.get_low()

@then(u'lower count items will be displayed')
def low_display(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="low_items",
                  attachment_type=allure.attachment_type.PNG)

@when(u'the user clicks expired in the stock level')
def click_expired(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.get_expired()

@then(u'expired items will be displayed')
def expired_display(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="expired_items",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user selects the supplier')
def select_supplier(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.select_supplier()

@then(u'user will get the selected supplier in the list will be displayed')
def supplier_display(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="suppliername",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user selects the item type')
def select_itemtype(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.select_itemtype()

@then(u'user will get the selected item in the list')
def itemtype_display(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="itemname",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user clicks on the reset button')
def click_reset(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_reset()

@then(u'filter fields will become empty')
def filter_empty(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="empty_items",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user clicks on checkbox in the list')
def click_checkbox(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_checkbox()

@when(u'clicks ln the delete button')
def click_delete(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_deleteprogram()

@then(u'the confiration pop-up for delete will appear')
def confirmation_popup(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.confirmation_popup()

@then(u'the user clicks on yes')
def click_yes(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_yesin_delete()

@then(u'the client will be deleted from the list')
def deleted_list(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.fetch_deletedmsg()

@when(u'user clicks on the table settings')
def click_tablesetting(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_tablesetting()

@then(u'user will get the pop-up of columns in the list')
def popup_list(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.tablesetting_popup()

@then(u'the user select or deselect the column name')
def select_columnname(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.select_columnname()

@then(u'click on apply button')
def click_apply(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_apply()

@then(u'the list will be edited regarding the column changes')
def column_change(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.clientcolumn_table()
    allure.attach(context.driver.get_screenshot_as_png(), name="table changes applied",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user clicks on the print icon')
def click_print(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_printicon()

@then(u'user will get the pop-up for print to print the table')
def print_popup(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="print_popup",
                  attachment_type=allure.attachment_type.PNG)

@when(u'clicks on download icon')
def click_download(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_download()

@then(u'it will download all the data in the table')
def all_datadownloaded(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="downloaded data",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user clicks on the checkbox')
def clicks_on_checkbox(context):
    click_checkbox(context)

@then(u'user will get the selected item detail downloaded')
def select_item(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="downloaded data",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user apply the filters')
def apply_filters(context):
    select_supplier(context)
    select_itemtype(context)

@then(u'user will get the applied filter item details')
def applied_filter(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="downloaded data",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user clicks on the arrow in the table header')
def click_arrow(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_sort()

@then(u'the data will be sorted')
def data_sort(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="Data sorted",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user clicks on item name')
def click_itemname(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_itemname()

@then(u'user will be able to view the added details')
def view_addeddetail(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.redirect_viewpage()
    allure.attach(context.driver.get_screenshot_as_png(), name="view detail",
                  attachment_type=allure.attachment_type.PNG)

@given(u'user is on the view item page')
def view_itempage(context):
    login_page(context)
    enter_cred(context)
    click_login(context)
    redirect_dashboard(context)
    click_inventory(context)
    click_itemname(context)
    view_addeddetail(context)

@when(u'user clicks on the item fields')
def click_itemfield(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_itemfield()

@then(u'user will get the save and cancel button')
def save_cancel_button(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.fetch_save()
    itemlistPage.fetch_cancel
    allure.attach(context.driver.get_screenshot_as_png(), name="fetch_save_cancel",
                  attachment_type=allure.attachment_type.PNG)

@then(u'after edited any details')
def edit_details(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.redirect_viewpage()

@then(u'user clicks on the save button in edit page')
def save_inedit(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_saveinedit()
    allure.attach(context.driver.get_screenshot_as_png(), name="saveinedit",
                  attachment_type=allure.attachment_type.PNG)

@then(u'user will get the pop-up of update confirmation')
def popup_update(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.fetch_updateconfirmation()

@then(u'user will get the updated successfully message')
def update_successfully(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.fetch_updatesuccess()
    allure.attach(context.driver.get_screenshot_as_png(), name="updated success",
                  attachment_type=allure.attachment_type.PNG)

@when(u'user clicks on the cancel button')
def click_cancel(context):
    itemlistPage = ItemPage(context.driver)
    itemlistPage.click_cancel()

@then(u'user will be redirected to item list page')
def redirect_itemlist(context):
    allure.attach(context.driver.get_screenshot_as_png(), name="redirect to itemlist",
                  attachment_type=allure.attachment_type.PNG)